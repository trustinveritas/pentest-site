"""
.SYNOPSIS
    SHA256 Hash Calculator

.DESCRIPTION
    This Python script calculates the SHA256 hash of a file dragged onto it, displaying the result in a pop-up window with options to save, copy, or close.

.VERSION
    1.0

.AUTHOR
    SLN

.NOTES
    Requires Python 3.6 or later.
    To compile as an .exe, use PyInstaller.
"""

import hashlib
import tkinter as tk
from tkinter import filedialog, messagebox
import sys
import os

# Funktion zur SHA256-Berechnung
def calculate_sha256(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

# Funktion zum Speichern des Hash-Werts als Datei
def save_as(hash_value):
    file_path = filedialog.asksaveasfilename(
        defaultextension=".txt",
        filetypes=[("Text files", "*.txt")],
        title="Save SHA256 as..."
    )
    if file_path:
        try:
            with open(file_path, "w") as f:
                f.write(hash_value)
            messagebox.showinfo("Saved", f"SHA256 saved to {file_path}")
        except Exception as e:
            messagebox.showerror("Error", f"Could not save file: {e}")

# Hauptfunktion für die GUI
def show_popup(file_path):
    hash_value = calculate_sha256(file_path)

    # Pop-Up-Fenster erstellen
    popup = tk.Tk()
    popup.title("SHA256 Calculator")

    tk.Label(popup, text=f"SHA256 Hash for:\n{file_path}", wraplength=400, justify="left").pack(pady=10)
    tk.Entry(popup, width=64, justify="center", state="readonly", textvariable=tk.StringVar(value=hash_value)).pack(pady=5)

    # Buttons
    tk.Button(popup, text="Save As...", command=lambda: save_as(hash_value)).pack(side="left", padx=5, pady=10)
    tk.Button(popup, text="Copy To Clipboard", command=lambda: popup.clipboard_append(hash_value)).pack(side="left", padx=5, pady=10)
    tk.Button(popup, text="Close", command=popup.destroy).pack(side="left", padx=5, pady=10)

    popup.mainloop()

# Main-Eingabe, wenn Datei per Drag & Drop hinzugefügt wird
def main():
    if len(sys.argv) > 1:
        file_path = sys.argv[1]
        if os.path.isfile(file_path):
            show_popup(file_path)
        else:
            print("Error: File does not exist.")
    else:
        print("Usage: Drag a file onto the executable.")

if __name__ == "__main__":
    main()
